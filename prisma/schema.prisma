  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
  }

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(STUDENT)
  status    Status   @default(INACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
  testAttempts TestAttempt[]
}

  model otp {
    id         Int      @id @default(autoincrement())
    email      String?  @unique
    otp        String
    created_at DateTime @default(now())
    update_at  DateTime @updatedAt
    expiry     DateTime
  }

  model Course {
    id          Int       @id @default(autoincrement())
    title       String
    description String    @db.Text
    coverImage  String?   @db.Text
    instructorId Int
    isPublished Boolean   @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    instructor  User      @relation(fields: [instructorId], references: [id], onDelete: Cascade)
    chapters    Chapter[]

    @@index([instructorId])
  }

  model Chapter {
    id          Int       @id @default(autoincrement())
    title       String
    description String?   @db.Text
    coverImage  String?   @db.Text
    position    Int       // For ordering chapters
    isPublished Boolean   @default(false)
    courseId    Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
    lessons     Lesson[]
    tests       Test[]

    @@index([courseId])
  }

  model Lesson {
    id          Int       @id @default(autoincrement())
    title       String
    content     String    @db.Text
    videoUrl    String?   @db.Text
    position    Int       @default(0)
    isPublished Boolean   @default(false)
    chapterId   Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    attachments Attachment[]

    @@index([chapterId])
  }

model Test {
  id          Int       @id @default(autoincrement())
  title       String
  description String?   @db.Text
  timeLimit   Int?      // Time limit in minutes
  passingScore Int      @default(70) // Passing score percentage
  isPublished Boolean   @default(false)
  chapterId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    TestAttempt[]

    @@index([chapterId])
  }

  model Question {
    id          Int       @id @default(autoincrement())
    question    String    @db.Text
    type        QuestionType @default(SINGLE_CHOICE)
    points      Int       @default(1)
    position    Int       @default(0)  // Added for ordering questions
    testId      Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    test        Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
    options     Option[]

    @@index([testId])
  }

  model Option {
    id          Int       @id @default(autoincrement())
    content     String    @db.Text
    isCorrect   Boolean   @default(false)
    image       String?   @db.Text
    questionId  Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@index([questionId])
  }

model Attachment {
  id          Int       @id @default(autoincrement())
  name        String
  url         String    @db.Text
  lessonId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        AttachmentType?
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@index([lessonId])
}

// New model for tracking test attempts and results
model TestAttempt {
  id          Int       @id @default(autoincrement())
  userId      Int
  testId      Int
  score       Float     // Final score as percentage
  answers     Json      // Store answers as { questionId: [selectedOptionIds] }
  startedAt   DateTime  @default(now())
  completedAt DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  test        Test      @relation(fields: [testId], references: [id], onDelete: Cascade)

  // Ensure user can only attempt a test once
  @@unique([userId, testId])
  @@index([userId])
  @@index([testId])
}

  enum Role {
    STUDENT
    INSTRUCTOR
    ADMIN
  }

  enum Status {
    ACTIVE
    INACTIVE
  }

  enum QuestionType {
    MULTIPLE_CHOICE
    SINGLE_CHOICE
    TRUE_FALSE
    SHORT_ANSWER
  }

  enum AttachmentType {
    IMAGE
    VIDEO
    DOCUMENT
    LINK
  }
  // enum EnrollmentStatus {
  //   ENROLLED
  //   COMPLETED
  //   DROPPED
  // } 