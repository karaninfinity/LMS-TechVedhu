// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model otp {
  id         Int      @id @default(autoincrement())
  email      String?  @unique
  otp        String
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  expiry     DateTime
}


// model Course {
//   id          Int      @id @default(autoincrement())
//   title       String
//   description String   @db.Text
//   instructorId Int
//   instructor   User     @relation("Instructor", fields: [instructorId], references: [id])
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Relations
//   enrollments  Enrollment[]
//   assignments  Assignment[]

//   @@index([instructorId])
// }

// model Enrollment {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   courseId  Int
//   status    EnrollmentStatus @default(ENROLLED)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Relations
//   user      User     @relation(fields: [userId], references: [id])
//   course    Course   @relation(fields: [courseId], references: [id])

//   @@unique([userId, courseId])
//   @@index([userId])
//   @@index([courseId])
// }

// model Assignment {
//   id          Int      @id @default(autoincrement())
//   title       String
//   description String   @db.Text
//   dueDate     DateTime
//   courseId    Int
//   createdById Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Relations
//   course      Course   @relation(fields: [courseId], references: [id])
//   createdBy   User     @relation(fields: [createdById], references: [id])
//   submissions Submission[]

//   @@index([courseId])
//   @@index([createdById])
// }

// model Submission {
//   id           Int      @id @default(autoincrement())
//   content      String   @db.Text
//   grade        Float?
//   assignmentId Int
//   userId       Int
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   // Relations
//   assignment   Assignment @relation(fields: [assignmentId], references: [id])
//   user        User       @relation(fields: [userId], references: [id])

//   @@index([assignmentId])
//   @@index([userId])
// }

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

// enum EnrollmentStatus {
//   ENROLLED
//   COMPLETED
//   DROPPED
// } 